name: Build Rasa Docker Image and Train Model

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      force_all:
        description: "Build all languages regardless of changes"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]
      push:
        description: "Push images to GHCR (false will build locally only)"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]

jobs:
  get-langs:
    runs-on: ubuntu-latest
    outputs:
      langs: ${{ steps.langs.outputs.langs }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Get language/region matrix
        id: langs
        run: |
          LANGS=$(python3 scripts/list_languages.py)
          echo "langs=$LANGS" >> $GITHUB_OUTPUT

  filter:
    needs: get-langs
    runs-on: ubuntu-latest
    outputs:
      changed_langs: ${{ steps.filter.outputs.changed_langs }}
      changed_langs_json: ${{ steps.filter.outputs.changed_langs_json }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine base ref
        id: base
        run: |
          if [ -n "${{ github.event.before }}" ]; then echo "base=${{ github.event.before }}" >> $GITHUB_OUTPUT; else echo "base=$(git rev-parse HEAD~1)" >> $GITHUB_OUTPUT; fi
      - name: Get changed files
        id: diff
        run: |
          FILES=$(git diff --name-only "${{ steps.base.outputs.base }}" "${{ github.sha }}")
          echo "files=$FILES" >> $GITHUB_OUTPUT
      - name: Filter changed languages
        id: filter
        env:
          FORCE_ALL: ${{ github.event.inputs.force_all }}
        run: |
          LANGS="${{ needs.get-langs.outputs.langs }}"
          CHANGED="${{ steps.diff.outputs.files }}"
          CHANGED_LANGS=()
          FALLBACK_REGION="us"
          # If global-impact files changed, rebuild all languages
          if [ "${FORCE_ALL}" = "true" ]; then
            IFS=',' read -ra ALL <<< "$LANGS"
            CHANGED_LANGS=("${ALL[@]}")
          elif echo "$CHANGED" | grep -qE "^(Dockerfile|scripts/|src/components/|src/core/|src/locales/en/)"; then
            IFS=',' read -ra ALL <<< "$LANGS"
            CHANGED_LANGS=("${ALL[@]}")
          else
          IFS=',' read -ra LANG_ARR <<< "$LANGS"
          for lang in "${LANG_ARR[@]}"; do
            lang_code="$lang"
            region=""
            if [[ "$lang" == */* ]]; then
              region="${lang#*/}"
              lang_code="${lang%%/*}"
            fi
            # Build if core changed or if locale/language/region changed
            if echo "$CHANGED" | grep -qE "^(src/core/|src/locales/$lang_code/|src/locales/$lang_code/$region/)"; then
              CHANGED_LANGS+=("$lang")
            fi
          done
          fi
          echo "changed_langs=${CHANGED_LANGS[*]}" >> $GITHUB_OUTPUT
          # Also emit a JSON array for matrix consumption
          if [ ${#CHANGED_LANGS[@]} -eq 0 ]; then
            echo 'changed_langs_json=[]' >> $GITHUB_OUTPUT
          else
            json='['
            for i in "${!CHANGED_LANGS[@]}"; do
              val="${CHANGED_LANGS[$i]}"
              esc=${val//\\/\\\\}
              esc=${esc//\"/\\\"}
              if [ "$i" -gt 0 ]; then json+=","; fi
              json+="\"$esc\""
            done
            json+=']'
            echo "changed_langs_json=$json" >> $GITHUB_OUTPUT
          fi

  build:
    needs: [get-langs, filter]
    runs-on: ubuntu-latest
    permissions: write-all
    strategy:
      matrix:
        lang: ${{ fromJson(needs.filter.outputs.changed_langs_json) }}
      fail-fast: false
    if: needs.filter.outputs.changed_langs_json != '[]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository name
        run: |
          REPO_NAME=${{ github.repository }}
          echo "REPO_NAME_LC=${REPO_NAME,,}" >>${GITHUB_ENV}

      - name: Build and (optionally) push Docker image for ${{ matrix.lang }}
        env:
          PUSH_IMAGES: ${{ github.event.inputs.push }}
        run: |
          set -euo pipefail
          LANG_SPEC='${{ matrix.lang }}'
          LANG_CODE="$LANG_SPEC"; REGION=""
          if [[ "$LANG_SPEC" == */* ]]; then REGION="${LANG_SPEC#*/}"; LANG_CODE="${LANG_SPEC%%/*}"; fi
          LAYERS=("src/core" "src/locales/en/us")
          if [[ "$LANG_CODE" != "en" ]]; then LAYERS+=("src/locales/$LANG_CODE"); fi
          if [[ -n "$REGION" ]]; then LAYERS+=("src/locales/$LANG_CODE/$REGION"); fi
          # Only keep existing dirs
          EXISTING=()
          for p in "${LAYERS[@]}"; do [ -d "$p" ] && EXISTING+=("$p"); done
          LAYERS_STR=$(IFS=' '; echo "${EXISTING[*]}")
          echo "Using layers: $LAYERS_STR"
          CACHE_REF="ghcr.io/$REPO_NAME_LC:buildcache"
          # Decide whether to push or load locally (manual runs can set push=false)
          DOCKER_OUTPUT_FLAG="--push"
          if [ "${PUSH_IMAGES:-true}" = "false" ]; then
            DOCKER_OUTPUT_FLAG="--load"
          fi
          docker buildx build \
            --build-arg LAYERS="$LAYERS_STR" \
            --cache-from type=registry,ref=$CACHE_REF \
            --cache-to type=registry,ref=$CACHE_REF,mode=max \
            -t ghcr.io/$REPO_NAME_LC:${{ matrix.lang }}-latest \
            -t ghcr.io/$REPO_NAME_LC:${{ matrix.lang }}-${{ github.sha }} \
            $DOCKER_OUTPUT_FLAG .
